name: bookstore 
on: push 
jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - name: get the code
              uses: actions/checkout@v3

            - name: Setup .NET SDK
              uses: actions/setup-dotnet@v3
              with:
                dotnet-version: 7

            - name: Setup Node.js
              uses: actions/setup-node@v2

            - name: Install dependencies
              run: dotnet restore

            - name: Build
              run: dotnet build --configuration Release --no-restore

            - name: Test
              run: dotnet test --no-restore --verbosity normal
              

    deplpy: 
        needs: build
        runs-on: ubuntu-latest
        steps:
            - name: Get the code
              uses: actions/checkout@v3

            - name: Set up Docker
              uses: docker/setup-buildx-action@v1

            - name: Configure AWS CLI
              run: | 
                aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws configure set region ap-south-1

            - name: Login to Amazon ECR
              run: | 
                aws --version
                aws ecr get-login-password --region ap-south-1 | docker login -u AWS -p $(aws ecr get-login-password --region ap-south-1) ${{ secrets.ECS_ACCOUNT }}
            
            - name: Build the docker image
              run: | 
                docker build -t dotnet-application-auth --target auth -f Dockerfile . 
                docker build -t dotnet-application-migrator --target migrator -f Dockerfile . 
                docker build -t dotnet-application-web --target web -f Dockerfile . 
                docker build -t dotnet-application-host --target host -f Dockerfile . 
            
            - name: Tag docker image
              run: |
                docker tag dotnet-application-auth:latest ${{ secrets.ECS_REPO }}/dotnet-application:latest
                docker tag dotnet-application-migrator:latest ${{ secrets.ECS_REPO }}/dotnet-application:latest
                docker tag dotnet-application-web:latest ${{ secrets.ECS_REPO }}/dotnet-application:latest
                docker tag dotnet-application-host:latest ${{ secrets.ECS_REPO }}/ dotnet-application:latest
        
            - name: Push image to ECR
              run: |
                 docker push ${{ secrets.ECS_REPO }}/dotnet-application-auth:latest
                 docker push ${{ secrets.ECS_REPO }}/dotnet-application-migrator:latest
                 docker push ${{ secrets.ECS_REPO }}/dotnet-application-web:latest
                 docker push ${{ secrets.ECS_REPO }}/dotnet-application-host:latest


            - name: Deploy to ECS
              run: |
                aws ecs update-service --cluster my-cluster --service my-ecs-service-web --force-new-deployment
                aws ecs update-service --cluster my-cluster --service my-ecs-service-host --force-new-deployment
                aws ecs update-service --cluster my-cluster --service my-ecs-service-auth --force-new-deployment
                aws ecs update-service --cluster my-cluster --service my-ecs-service-migrator --force-new-deployment


